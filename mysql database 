<----------------OPEN mysql --------------->
/opt/lampp/bin/mysql -u root

<---show database--->
SHOW DATABASES;

<---choose database--->
use <database>;

<----- access admin php------>
http://localhost/phpmyadmin/

<------create database--->

CREATE DATABASE <name>;

CREATE, RETRIEVE, U

<----------------USING phpadmin --------------->


database ----> import ----> upload file ---> go

<----------------D D L --------------->

CREATE TABLE users(
id INT NOT NULL AUTO_INCREMENT,
username VARCHAR(255) NOT NULL,
password VARCHAR(20) NOT NULL,
PRIMARY KEY (id)
);



REGISTRATION TABLE (CP2)

CREATE TABLE users(
id INT NOT NULL AUTO_INCREMENT,
username VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL,
fullname VARCHAR(255) NOT NULL,
password VARCHAR(255) NOT NULL,
address VARCHAR(255) NOT NULL,
PRIMARY KEY (id)
);



CREATE TABLE artists(
id INT AUTO_INCREMENT NOT NULL,
name VARCHAR(255) NOT NULL UNIQUE,
PRIMARY KEY(id)
);


CREATE TABLE albums(
id INT AUTO_INCREMENT NOT NULL,
name VARCHAR(255) NOT NULL,
year YEAR(4),
artist_id INT,
PRIMARY KEY(id),
FOREIGN KEY(artist_id)
REFERENCES artists(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE songs(
id INT AUTO_INCREMENT NOT NULL,
title VARCHAR(255)NOT NULL,
length INT,
genre VARCHAR(255),
album_id INT,
PRIMARY KEY(id),
FOREIGN KEY(album_id)
REFERENCES albums(id)
ON UPDATE CASCADE
ON DELETE SET NULL
);


CREATE TABLE playlists(
id INT AUTO_INCREMENT NOT NULL,
date_created TIMESTAMP
DEFAULT CURRENT_TIMESTAMP,
user_id INT,
PRIMARY KEY(id),
FOREIGN KEY(user_id)
REFERENCES users(id)
ON UPDATE CASCADE
ON DELETE SET NULL
);


CREATE TABLE songs_playlists(
id INT AUTO_INCREMENT NOT NULL,
song_id INT,
playlist_id INT,
PRIMARY KEY(id),
FOREIGN KEY(song_id)
REFERENCES songs(id)
ON UPDATE CASCADE
ON DELETE SET NULL,
FOREIGN KEY(playlist_id)
REFERENCES playlists(id)
ON UPDATE CASCADE
ON DELETE SET NULL
);

<-------------CRUD or DML -------------------------->


Syntax:
INSERT INTO <table>(<column>, <column2>,) VALUES (value1, value2);

No need for ID if id has AUTO_INCREMENT
<---insert artist in artists table---->
INSERT INTO artists(name) VALUES ("Rivermaya"); 
INSERT INTO artists(name) VALUES ("Psy"); 


<---insert album in albums table --->
INSERT INTO albums(name, year, artist_id) VALUES ("Trip",1996,1);
INSERT INTO albums(name, year, artist_id) VALUES ("Psy 6",2012,2);


<---insert song in songs table --->
INSERT INTO songs(title, length, genre, album_id) VALUES ("Gangnam Style",253,"k-pop",2);
INSERT INTO songs(title, length, genre, album_id) VALUES ("Kundiman",234,"OPM",1);
INSERT INTO songs(title, length, genre, album_id) VALUES ("Kisapmata",279,"OPM",1);



<-------------RETRIEVE: SELECT command--------------->
Syntax: SELECT <columns> FROM <table> WHERE <condition>

<--Search/DISPLAY ALL song from songs table-->
SELECT * FROM songs;

<---search Psy from artist table --->
SELECT * FROM artists WHERE name="Psy";


SELECT title, genre FROM songs WHERE album_id = 1;

<--select/search from songs from OPM genre-->
SELECT  title FROM songs WHERE genre="opm";


<---search/select a song/songs that are more than 4minutes length from OPM genre--->
SELECT title, length FROM songs WHERE length >240 and genre="opm";


<------------------Update : UPDATE------------------------------>
Syntax:
UPDATE <table> SET <columns>=<value> WHERE <condition>

<---update/change song(Gangnam Style) from songs table album_id from 2 (changed it from 1)-->
UPDATE songs SET album_id=2 WHERE title ="Gangnam Style"


<-------------Delete : DELETE -------------------------->
Syntax: 

DELETE FROM <table> WHERE <condition>


<--Syntax for deleting column--->
DELETE FROM table WHERE column=val;

<-------------JOIN -------------------------->
Syntax : 

SELECT table.columns FROM table1 JOIN table2 ON (table1.primary_key = table2.foreign_key
WHERE condition = "";


EXERCISE:

Add 2 artists, 2 albums, 4 songs
Delete song "Gangnam Style" from the database
Update the song length of Kisapmata to 300 seconds

<--- EXERCISE Add 2 artists,-->
INSERT INTO artists(name) VALUES ("Bullet Dumas");
INSERT INTO artists(name) VALUES ("Dominique");

<--- EXERCISE Add 2 albums,-->
INSERT INTO albums(name, year, artist_id) VALUES ("Dumas",2015,3);
INSERT INTO albums(name, year, artist_id) VALUES ("PINK",2014,4);


UPDATE albums SET artist_id=3 WHERE name ="Dumas";


<--- EXERCISE Add 4 songs-->

INSERT INTO songs(title, length, genre, album_id) VALUES ("Limguhit",250,"OPM",3);

INSERT INTO songs(title, length, genre, album_id) VALUES ("Tugtog",500,"OPM",3);

INSERT INTO songs(title, length, genre, album_id) VALUES ("Kulay Rosas",230,"OPM",4);


<-- EXERCISE Delete Gangnam Style--->
DELETE FROM songs WHERE title="Gangnam Style";

<--EXERCISE UPDATE song length of Kisapmata to 300seconds--->
UPDATE songs SET length=300 WHERE title ="Kisapmata";


<-------------END EXERCISE------------>


<-- join album name and song title from albums_id and songs-->
SELECT albums.name, songs.title FROM albums JOIN songs ON(albums.id=songs.album_id);

ex.

SELECT artists.name FROM artists JOIN albums ON(artists.id = albums.artist_id) JOIN songs ON (songs.album_id = albums.id) WHERE songs.genre = "OPM";



<----QUESTION Hanapin lahat ng OPM ARTIST -->


<---ERROR--->
SELECT artist_id FROM albums JOIN artist_name ON(song_genre = artist_name)
WHERE artist_name = songs_genre;


<---SIR TERRENCE VERSION --- >

SELECT artists.name FROM artists JOIN albums ON(artists.id = albums.artist_id) JOIN songs ON (songs.album_id = albums.id) WHERE songs.genre = "OPM";







<-----EXAMPLE----->


flight table
id
1 test1
2 test2
3 test3
4 test4
5 JX113


lipad table
1 tky mnl 1 6/5/18
2 tky mnl 1 6/5/18
3 tky mnl 1 6/5/18
4 tky mnl 1 6/5/18

pilot
1 Jun jun   1	
2 Paul      3
3 Terence   5




Select flight.code FROM lipad JOIN flight ON(flight.id = lipad.flight_id)
WHERE lipad.id=3;

<---- QUESTION destination ng flight code JX113 --->

SELECT lipad.destination FROM lipad JOIN flight ON(lipad.flight_id =flight.id)
WHERE flight.code = "JX113"

<--- QUESTION sino ang piloto ng flight na galing manila nung june 21?--->

Select pilot.name FROM pilot JOIN flight JOIN lipad
ON(lipad.flight_id = flight.id AND pilot.flight_code = flight_id)
WHERE lipad.source = "MNL" AND date "June21";


JOIN = inner join
LEFT JOIN/RIGHT JOIN = outter Join



<---------------LIKE = WILD CARD------------------>

Syntax:
sample:
SELECT * FROM pet WHERE name LIKE B%; <---find name/word starting 'B' -->
SELECT * FROM pet WHERE name LIKE %fy; <---find name/word ending 'fy' -->
SELECT * FROM pet WHERE name LIKE %w%; <-- find names containing 'w'-->



SELECT * FROM pet WHERE name LIKE _ _ _ _ _;  <--- find names/word wit 5 characters;


<-------------ORDER BY ----------->

Syntax:
SELECT column1, column2, FROM table_name ORDER BY column1, column2;

sample:

SELECT * FROM artists ORDER BY id;





<----------------------------------SPOTIFY2 DATABASE DAY 2 ----------------------------->



SELECT * FROM artists ORDER BY id;

<-- Descending -->
SELECT * FROM artists ORDER BY id DESC; 

<---- Seach/select songs ng may id na 3, 4 at 5 --->
SELECT * FROM songs WHERE id = 3 OR id = 4 OR id = 5;

mas maikli:
SELECT * FROM songs WHERE id IN (3, 4, 5);





 
<-------------  EXERCISE -------------->

CREATE TABLE movie_casts(
id INT NOT NULL AUTO_INCREMENT,
title VARCHAR(255) NOT NULL,
year INT,
star VARCHAR(255) NOT NULL,
PRIMARY KEY (id)
);



INSERT INTO movie_casts(title, year, star) VALUES ("Star Wars",1977,"Carrie Fisher");
INSERT INTO movie_casts(title, year, star) VALUES ("Star Wars",1977,"Harrison Ford");
INSERT INTO movie_casts(title, year, star) VALUES ("Star Wars",2015,"Daisy Ridley");
INSERT INTO movie_casts(title, year, star) VALUES ("Star Wars",2015,"Carrie Fisher");
INSERT INTO movie_casts(title, year, star) VALUES ("Star Wars",2015,"Harrison Ford");


SELECT title FROM movie_casts WHERE year = 2015;

<---update ang title ng movie_casts table na may id na 4,5,6 ----->
UPDATE movie_casts SET title="Star Wars: The Force Awakens" WHERE id IN(4,5,6);

<----- yung magkakapareho na title mula sa movie_casts TABLE ------>
SELECT DISTINCT title FROM movie_casts;




<----------------DISTINCT ---------------->
SELECT DISTINCT tile 

SELECT DISTINCT age FROM students;

DELETE FROM movie_casts WHERE title="Star Wars";




<------------- EXERCISE 3 CLASSIC------------->
SELECT customerName FROM customers WHERE country="Philippines";

CRUZ & Sons Co.

SELECT contactFirstName FROM customers WHERE customerName="La Rochelle Gifts";

Janine


SELECT MSRP FROM products WHERE productName="The Titanic";

100.17

<----Who uses the jfirrelli@classicmodelcars.com email?---->
SELECT firstName FROM employees WHERE email="jfirrelli@classicmodelcars.com";

Jeff
Julie

<-----Who are the customers that does not have a state? ---->

customers  ---> customerName ---> state
SELECT customerName FROM customers WHERE state IS NULL;



<---------------------------AND/OR/NOT---------------------------->
<--------What is the email of the employee Steve Pattersoni?------>

SELECT email FROM employees  WHERE firstName= "Steve";

spatterson@classicmodelcars.com 



<---List the customerNames who are NOT in USA and have a credit limit above 3000--->

SELECT customerName FROM customers WHERE country != "USA" AND creditLimit > 3000; 

+------------------------------------+
| customerName                       |
+------------------------------------+
| Atelier graphique                  |
| Australian Collectors, Co.         |
| La Rochelle Gifts                  |
| Baane Mini Imports                 |
| Blauer See Auto, Co.               |
| Euro+ Shopping Channel             |
| Volvo Model Replicas, Co           |
| Danish Wholesale Imports           |
| Saveley & Henriot, Co.             |
| Dragon Souveniers, Ltd.            |
| Handji Gifts& Co                   |
| Herkku Gifts                       |
| Daedalus Designs Imports           |
| La Corne D'abondance, Co.          |
| Osaka Souveniers Co.               |
| Toys of Finland, Co.               |
| AV Stores, Co.                     |
| Clover Collections, Co.            |
| UK Collectables, Ltd.              |
| Canadian Gift Exchange Network     |
| Mini Caravy                        |
| King Kong Collectables, Co.        |
| Enaco Distributors                 |
| Heintze Collectables               |
| Québec Home Shopping Network       |
| giftsbymail.co.uk                  |
| Alpha Cognac                       |
| Amica Models & Co.                 |
| Lyon Souveniers                    |
| Auto Associés & Cie.               |
| Toms Spezialitäten, Ltd            |
| Royal Canadian Collectables, Ltd.  |
| Anna's Decorations, Ltd            |
| Rovelli Gifts                      |
| Souveniers And Things Co.          |
| Vida Sport, Ltd                    |
| Norway Gifts By Mail, Co.          |
| Oulu Toy Supplies, Inc.            |
| Petit Auto                         |
| Down Under Souveniers, Inc         |
| Stylish Desk Decors, Co.           |
| Australian Gift Network, Co        |
| Suominen Souveniers                |
| CAF Imports                        |
| Marseille Mini Autos               |
| Reims Collectables                 |
| GiftsForHim.com                    |
| Royale Belge                       |
| Salzburg Collectables              |
| Cruz & Sons Co.                    |
| L'ordine Souveniers                |
| Tokyo Collectables, Ltd            |
| Auto Canal+ Petit                  |
| Extreme Desk Decorations, Ltd      |
| Bavarian Collectables Imports, Co. |
| Scandinavian Gift Ideas            |
| Mini Auto Werke                    |
| Corrida Auto Replicas, Ltd         |
| Australian Collectables, Ltd       |
| Frau da Collezione                 |
| Iberia Gift Imports, Corp.         |
| Double Decker Gift Stores, Ltd     |
| Kelly's Gift Shop                  |
+------------------------------------+

<---- Which products has less than 1000 items in stock or a productLine of planes ---->

SELECT productName from products WHERE quantityInStock < 1000 OR productline = "planes";

+---------------------------------------------+
| productName                                 |
+---------------------------------------------+
| 1968 Ford Mustang                           |
| 1980s Black Hawk Helicopter                 |
| 1911 Ford Town Car                          |
| P-51-D Mustang                              |
| 1928 Mercedes-Benz SSK                      |
| 1928 British Royal Navy Airplane            |
| 1960 BSA Gold Star DBD34                    |
| 1900s Vintage Bi-Plane                      |
| Corsair F4U ( Bird Cage)                    |
| 1900s Vintage Tri-Plane                     |
| 1997 BMW F650 ST                            |
| 1996 Peterbilt 379 Stake Bed with Outrigger |
| 1928 Ford Phaeton Deluxe                    |
| 2002 Yamaha YZR M1                          |
| American Airlines: B767-300                 |
| The Mayflower                               |
| America West Airlines B757-200              |
| ATA: B757-300                               |
| F/A 18 Hornet 1/72                          |
| American Airlines: MD-11S                   |
| Boeing X-32A JSF                            |
| Pont Yacht                                  |
+---------------------------------------------+

<---- AS ---->
<------ Compute for the profit of each products in the products table by subtracting the buyPrice column from MSRP. Name this column as profit. ------>


<----------LIKE----------->

SELECT customerName FROM customers WHERE name LIKE "A%";


What products (productName) did the customer Baane Mini Imports ordered?

SELECT * FROM customers JOIN orders ON (customers.customerNumber = order.customerNumber =orders.customerNumber) JOIN orderdetails ON (orders.orderNumber = orderdetails.orderNumber) JOIN products ON (orderdetails.productCode = products.productCode) WHERE customers.customerName LIKE "Baane%";


SELECT  subordinate.firstName,subordinate.lastName FROM employees subordinate JOIN employees manager ON (subordinate.reportsTO = manager.employeeNumber) WHERE (manager.firstName = "Anthony" AND manager.lastName = "Bow");











<--------------- AS = required for columns optional for table names ------------------->

msrp=buyprice name as profit

<-----AS acts as an alias for your columns----->
SELECT productName, (MSRP - buyPrice) AS profit FROM products;




<----------------------CONNECT to DB ----------->

$conn = mysqli_connect($host, $username, $password, $dbname);

$result = mysqli_query($conn,$sql);



<----------------------PHP TO DB  ----------------------> 

	include "partials/connect.php";
	$name = $_POST['username'];
	$test = $_POST['password'];
	$hashpw = sha1($pw);  <---- to encrpyt password ----->

	$sql = "SELECT username FROM users WHERE username = '$name'";  // 
	<----- change name $sql1, $sql2, $sql3.... ---->
	$result = mysqli_query($conn,$sql);  <----- change name $result1, $result2, $result3.... ---->
	
	$sql = "INSERT INTO users(username, password) VALUES ('$name', '$hashpw')"; <--- encrypt password --->
	$result = mysqli_query($conn,$sql);

	if($result == true){
		echo "New user added!";
	} else {
		echo "Error: ".mysqli_error($conn);
	}
	mysqli_close($conn);


<-----------------SUB QUERIES -------------------->



<------------Single/scalar value------------------>

SELECT id FROM actors WHERE name ='Emma Watson';


<------LIST------->



<----------SHIRT EXAMPLE-------------->


SELECT size FROM Shirts WHERE id= (SELECT shirt_id FROM Materials WHERE material ='denim)
SELECT id FROM actores WHERE age > 20;

<-------------Shirt example 2 ------------------>

SELECT price, size FROM shirts WHERE id IN (SELECT shirt_id FROM materials
WHERE material = 'cotton');

SUB QUERY

SELECT customerName from customers WHERE id IN (SELECT customerNumber from payments WHERE 


SELECT DISTINCT salesRepEmployeeNumber FROM customers WHERE salesRepEmployeeNumber IS NOT NULL; -> gets all the employeeIDs who have customers.


<-------------QUESTION------------------>
Who are the employees who do not serve any customers?

<-------------- gets all employees who dont have customers. ----->
SELECT firstname, lastname FROM employees WHERE employeeNumber NOT IN (SELECT DISTINCT salesRepEmployeeNumber FROM customers WHERE salesRepEmployeeNumber IS NOT NULL); 


Q: Which is better to use? Subquery or Joins?

<----------------- pinagsasama yung table ---------->
JOINS are typical used if you want information from one or more tables that youll together




<------isa table lang yung ginagamit at hinahanap sa iba ----->
Subqueries only uses the outermost able for its final result

<------AGGREGATION OPERATORS ----------->

COUNT()
SUM()
MIN()
MAX()
AVG()

<-----STARS EXERCISE / COUNT ------>

SELECT count(*) FROM movie_casts WHERE title = 'Star Wars: The Force Awakens' AND year = 2015;

<-------------CLASSIC ERD EXAMPLE OF AGGREGATE OPERATORS ----------->

SELECT MIN(MSRP) FROM products;
SELECT AVG(MSRP) FROM products;
SELECT MAX(MSRP) FROM products;

<------------EXERCISE group by spotify2 database exercise -------------->

<--- average length group by genre --->
SELECT AVG(length), genre FROM songs GROUP BY genre;



SELECT AVG(length), genre FROM songs GROUP BY genre HAVING AVG(length)>300;



<------------FOR ITEMS TABLE Capstone 2 DAY 2 -------->

CREATE TABLE category (
	id int NOT NULL AUTO_INCREMENT,
	name VARCHAR(255),
	PRIMARY KEY (id)
);

CREATE TABLE items (
	id int NOT NULL AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	price int NOT NULL,
	img_path VARCHAR(255) NOT NULL,
	description VARCHAR(255) NOT NULL,
	category_id int,
	PRIMARY KEY (id),
	FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE CASCADE ON 
	UPDATE CASCADE
);


INSERT INTO category(name) VALUES ("Board games");
INSERT INTO category(name) VALUES ("Card games");
INSERT INTO category(name) VALUES ("Family games");

INSERT INTO items(name,price,img_path,description,category_id)
VALUES ("Galaxy Trucker", 4000, "assets/img/1.jpeg", "Galaxy Trucker game", 1);

INSERT INTO items(name, price, img_path, description, category_id)
VALUES ("Coup", 900, "assets/img/2.jpg", "Coup Game", 2);

INSERT INTO items(name, price, img_path, description, category_id)
VALUES ("Galaxy Trucker", 900, "assets/img/3.jpg", "Happy Salmon Game", 3);




<------- CAPSTONE 2 DATABASE --------> 

<------ USER --------> 

CREATE TABLE users(
id INT NOT NULL AUTO_INCREMENT,
username VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL,
fullname VARCHAR(255) NOT NULL,
password VARCHAR(255) NOT NULL,
address VARCHAR(255) NOT NULL,
PRIMARY KEY (id)
);

add role dafault or user/admin


 <----- CATEGORY ----->

CREATE TABLE category (
	id int NOT NULL AUTO_INCREMENT,
	name VARCHAR(255),
	PRIMARY KEY (id)
);

<------- ITEMS ------->

CREATE TABLE items (
	id int NOT NULL AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	price int NOT NULL,
	img_path VARCHAR(255) NOT NULL,
	description VARCHAR(255) NOT NULL,
	category_id int,
	PRIMARY KEY (id),
	FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE CASCADE ON 
	UPDATE CASCADE
);

<----- CATEGORY ------- >

INSERT INTO category(name) VALUES ("Children's Book");


<------ TEST MERCH --------------->

INSERT INTO items(name, price, img_path, description, category_id)
VALUES ("Hello There", 400, "assets/images/test1.jpg", "Hello There book", 1);

INSERT INTO items(name, price, img_path, description, category_id)
VALUES ("So me!", 900, "assets/images/test2.jpg", "So me book", 1);

INSERT INTO items(name, price, img_path, description, category_id)
VALUES ("Sea biscuit", 300, "assets/images/test3.jpg", "Sea biscuit book", 1);



<--------------DAY 4  cp2--------------------------->

<-----CHANGE TERMINAL ------>
ls -l
<----change permission---->
chmod 777 assets - change to terminal
chmod 777 images - images





